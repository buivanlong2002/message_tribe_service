package com.example.message_service.service.util;

import com.example.message_service.dto.ApiResponse;
import com.example.message_service.dto.response.ConversationResponse;
import com.example.message_service.dto.response.MessageResponse;
import com.example.message_service.model.ConversationMember;
import com.example.message_service.repository.ConversationMemberRepository;
import com.example.message_service.service.ConversationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class PushNewMessage {

    private final SimpMessagingTemplate messagingTemplate;
    private final ConversationService conversationService;

    /**
     * G·ª≠i danh s√°ch cu·ªôc tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng v·ªÅ client
     */
    public void pushUpdatedConversationsToUser(String userId) {
        ApiResponse<List<ConversationResponse>> response = conversationService.getConversationsByUser(userId);

        if (response.getData() != null) {
            String destination = "/topic/conversations/" + userId;
            messagingTemplate.convertAndSend(destination, response.getData());
            log.info("ƒê√£ g·ª≠i danh s√°ch cu·ªôc tr√≤ chuy·ªán t·ªõi {}", destination);
        } else {
            log.warn("Kh√¥ng c√≥ d·ªØ li·ªáu cu·ªôc tr√≤ chuy·ªán cho userId: {}", userId);
        }
    }

    public void pushUpdatedConversationsToMemBer(String conversationsId , String memberId){
        ApiResponse<List<MessageResponse>> response = conversationService.getMessagesByConversationId(conversationsId ,memberId);

        if (response.getData() != null) {
            String destination = "/topic/messages/" + conversationsId + "/" + memberId;
            messagingTemplate.convertAndSend(destination, response.getData());
            log.info("ƒê√£ g·ª≠i danh s√°ch tin nh·∫Øn c·ªßa cu·ªôc tr√≤ chuy·ªán {} t·ªõi user {}", conversationsId, memberId);
        } else {
            log.warn("Kh√¥ng c√≥ tin nh·∫Øn n√†o trong cu·ªôc tr√≤ chuy·ªán {} cho user {}", conversationsId, memberId);
        }
    }

    /**
     * G·ª≠i tin nh·∫Øn m·ªõi ƒë·∫øn t·∫•t c·∫£ th√†nh vi√™n trong conversation
     */
    public void pushNewMessageToConversation(String conversationId, MessageResponse message) {
        try {
            // T·∫°o payload cho tin nh·∫Øn m·ªõi
            var payload = new java.util.HashMap<String, Object>();
            payload.put("type", "NEW_MESSAGE");
            payload.put("conversationId", conversationId);
            payload.put("message", message);
            
            // G·ª≠i ƒë·∫øn topic c·ªßa conversation
            String destination = "/topic/conversation/" + conversationId;
            messagingTemplate.convertAndSend(destination, payload);
            
            log.info("üì® ƒê√£ g·ª≠i tin nh·∫Øn m·ªõi ƒë·∫øn conversation {}: {}", conversationId, message.getContent());
            log.info("üì® Destination: {}", destination);
            log.info("üì® Payload: {}", payload);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn m·ªõi ƒë·∫øn conversation {}: {}", conversationId, e.getMessage());
            e.printStackTrace();
        }
    }



}