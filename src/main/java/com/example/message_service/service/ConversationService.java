package com.example.message_service.service;

import com.example.message_service.dto.ApiResponse;
import com.example.message_service.dto.request.UpdateConversationRequest;
import com.example.message_service.dto.response.ConversationResponse;
import com.example.message_service.dto.response.LastMessageInfo;
import com.example.message_service.dto.response.MemberResponse;
import com.example.message_service.dto.response.MessageResponse;
import com.example.message_service.mapper.MessageMapper;
import com.example.message_service.model.*;
import com.example.message_service.model.UserMessage;
import com.example.message_service.repository.*;

import com.example.message_service.service.util.PushNewMessage;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import jakarta.transaction.Transactional;

import java.io.IOException;
import java.nio.file.*;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ConversationService {

    @Autowired
    private ConversationRepository conversationRepository;

    @Autowired
    private ConversationMemberRepository conversationMemberRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ConversationMemberService conversationMemberService;

    @Autowired
    private MessageRepository messageRepository;

    @Autowired
    private MessageMapper messageMapper;

    @Autowired
    private FriendshipRepository friendshipRepository;
    @Autowired
    private MessageStatusRepository messageStatusRepository;

    @Autowired
    private UserConversationRepository userConversationRepository;

    @Autowired
    private UserMessageRepository userMessageRepository;




    // ----------------- CREATE --------------------

    public ApiResponse<Conversation> createGroupConversation(String name, String createdBy) {
        try {
            if (name == null || name.trim().isEmpty()) {
                return ApiResponse.error("01", "T√™n nh√≥m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            }

            if (createdBy == null || createdBy.trim().isEmpty()) {
                return ApiResponse.error("02", "Ng∆∞·ªùi t·∫°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            }

            // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
            Optional<User> userOpt = userRepository.findById(createdBy);
            if (userOpt.isEmpty()) {
                return ApiResponse.error("03", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + createdBy);
            }

            Conversation conversation = new Conversation();
            conversation.setName(name.trim());
            conversation.setGroup(true);
            conversation.setCreatedBy(createdBy);
            conversation.setCreatedAt(LocalDateTime.now(ZoneId.of("Asia/Ho_Chi_Minh")));
            
            Conversation saved = conversationRepository.save(conversation);
            
            // Th√™m creator v√†o conversation
            ApiResponse<String> addCreatorResult = conversationMemberService.addCreatorToConversation(saved);
            if (!addCreatorResult.getStatus().isSuccess()) {
                return ApiResponse.error("04", "L·ªói khi th√™m ng∆∞·ªùi t·∫°o v√†o nh√≥m: " + addCreatorResult.getStatus().getDisplayMessage());
            }

            return ApiResponse.success("00", "T·∫°o nh√≥m th√†nh c√¥ng", saved);
        } catch (Exception e) {
            e.printStackTrace();
            return ApiResponse.error("99", "L·ªói khi t·∫°o nh√≥m: " + e.getMessage());
        }
    }


    @Transactional
    public Conversation getOrCreateOneToOneConversation(String senderId, String receiverId) {
        // T√¨m conversation 1-1 gi·ªØa sender v√† receiver
        Optional<Conversation> existing = findOneToOneConversation(senderId, receiverId);
                
        if (existing.isPresent()) {
            // Ki·ªÉm tra v√† kh√¥i ph·ª•c conversation n·∫øu c·∫ßn
            restoreConversationIfDeleted(senderId, existing.get().getId());
            restoreConversationIfDeleted(receiverId, existing.get().getId());
            
            return existing.get();
        }

        Conversation conversation = new Conversation();
        conversation.setGroup(false);
        conversation.setName(null);
        conversation.setCreatedBy(senderId);
        conversation.setCreatedAt(LocalDateTime.now());

        Conversation saved = conversationRepository.save(conversation);
        conversationMemberService.addMemberToConversation(saved, senderId, "member");
        conversationMemberService.addMemberToConversation(saved, receiverId, "member");

        return saved;
    }

    private void restoreConversationIfDeleted(String userId, String conversationId) {
        try {
            Optional<UserConversation> userConversationOpt = userConversationRepository
                .findByUserIdAndConversationId(userId, conversationId);
            
            System.out.println("üîç Checking conversation " + conversationId + " for user " + userId + ": " + 
                (userConversationOpt.isPresent() ? "found, deleted=" + userConversationOpt.get().isDeleted() : "not found"));
            
            if (userConversationOpt.isPresent() && userConversationOpt.get().isDeleted()) {
                // Kh√¥i ph·ª•c conversation (ch·ªâ conversation, kh√¥ng kh√¥i ph·ª•c tin nh·∫Øn c≈©)
                UserConversation userConversation = userConversationOpt.get();
                userConversation.setDeleted(false);
                userConversation.setDeletedAt(null);
                userConversationRepository.save(userConversation);
                
                // KH√îNG kh√¥i ph·ª•c tin nh·∫Øn c≈© - ƒë·ªÉ user ch·ªâ th·∫•y tin nh·∫Øn m·ªõi
                System.out.println("üîÑ Restored conversation " + conversationId + " for user " + userId + " (old messages remain deleted)");
            } else if (userConversationOpt.isPresent()) {
                System.out.println("‚ÑπÔ∏è Conversation " + conversationId + " for user " + userId + " is already active");
            } else {
                System.out.println("‚ÑπÔ∏è No UserConversation record found for user " + userId + " in conversation " + conversationId);
            }
        } catch (Exception e) {
            System.err.println("Error restoring conversation for user " + userId + ": " + e.getMessage());
            e.printStackTrace();
        }
    }

    public Conversation createDynamicGroupFromMessage(String senderId, String receiverId) {
        Optional<User> senderOpt = userRepository.findById(senderId);
        if (senderOpt.isEmpty()) throw new RuntimeException("Sender not found");

        Conversation group = new Conversation();
        group.setGroup(true);
        group.setName(senderOpt.get().getDisplayName());
        group.setCreatedBy(senderId);
        group.setCreatedAt(LocalDateTime.now());

        Conversation saved = conversationRepository.save(group);
        conversationMemberService.addMemberToConversation(saved, senderId, "member");
        conversationMemberService.addMemberToConversation(saved, receiverId, "member");

        return saved;
    }

    public ApiResponse<ConversationResponse> updateConversation(String conversationId, UpdateConversationRequest request) {
        return updateConversation(conversationId, request, null);
    }

    public ApiResponse<ConversationResponse> updateConversation(String conversationId, UpdateConversationRequest request, String requesterId) {
        Optional<Conversation> optional = conversationRepository.findById(conversationId);
        if (optional.isEmpty()) {
            return ApiResponse.error("04", "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán v·ªõi ID: " + conversationId);
        }

        Conversation conversation = optional.get();

        // Kh√¥ng ki·ªÉm tra quy·ªÅn - ai c≈©ng ƒë∆∞·ª£c ƒë·ªïi t√™n nh√≥m

        conversation.setName(request.getName());
        conversation.setGroup(request.isGroup());
        conversationRepository.save(conversation);

        ConversationResponse dto = toConversationResponse(conversation, null, null);
        return ApiResponse.success("00", "C·∫≠p nh·∫≠t cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng", dto);
    }

    public ApiResponse<String> updateGroupAvatar(String conversationId, MultipartFile file) {
        Optional<Conversation> optional = conversationRepository.findById(conversationId);
        if (optional.isEmpty()) {
            return ApiResponse.error("04", "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán");
        }

        Conversation conversation = optional.get();

        // Ki·ªÉm tra ph·∫£i l√† nh√≥m
        if (!conversation.isGroup()) {
            return ApiResponse.error("05", "Ch·ªâ nh√≥m m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán");
        }

        // Kh√¥ng ki·ªÉm tra quy·ªÅn - ai c≈©ng ƒë∆∞·ª£c ƒë·ªïi ·∫£nh nh√≥m

        try {
            // T·∫°o ƒë∆∞·ªùng d·∫´n l∆∞u ·∫£nh
            String originalFilename = Path.of(file.getOriginalFilename()).getFileName().toString();
            String fileName = UUID.randomUUID() + "_" + originalFilename;
            String uploadDir = "uploads/conversations/";
            Files.createDirectories(Paths.get(uploadDir));

            // L∆∞u file
            Path filePath = Paths.get(uploadDir).resolve(fileName);
            Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

            // L∆∞u ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi v√†o DB
            String avatarUrl = "/uploads/conversations/" + fileName;
            conversation.setAvatarUrl(avatarUrl);
            conversationRepository.save(conversation);

            return ApiResponse.success("00", "C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán nh√≥m th√†nh c√¥ng", avatarUrl);

        } catch (IOException e) {
            return ApiResponse.error("07", "L·ªói khi upload ·∫£nh ƒë·∫°i di·ªán nh√≥m");
        }
    }


    public void archiveConversation(String conversationId) {
        conversationRepository.findById(conversationId).ifPresent(c -> {
            c.setArchived(true);
            conversationRepository.save(c);
        });
    }

    // X√≥a conversation 1 ph√≠a (ch·ªâ ·∫©n kh·ªèi danh s√°ch c·ªßa user hi·ªán t·∫°i)
    public ApiResponse<String> deleteConversationForUser(String conversationId, String userId) {
        try {
            // Ki·ªÉm tra conversation c√≥ t·ªìn t·∫°i kh√¥ng
            Optional<Conversation> conversationOpt = conversationRepository.findById(conversationId);
            if (conversationOpt.isEmpty()) {
                return ApiResponse.error("01", "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán");
            }

            // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
            Optional<User> userOpt = userRepository.findById(userId);
            if (userOpt.isEmpty()) {
                return ApiResponse.error("02", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
            }

            // Ki·ªÉm tra user c√≥ ph·∫£i l√† th√†nh vi√™n c·ªßa conversation kh√¥ng
            Optional<ConversationMember> memberOpt = conversationMemberRepository.findByConversationIdAndUserId(conversationId, userId);
            if (memberOpt.isEmpty()) {
                return ApiResponse.error("03", "B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa cu·ªôc tr√≤ chuy·ªán n√†y");
            }

            // T√¨m ho·∫∑c t·∫°o UserConversation record
            Optional<UserConversation> userConversationOpt = userConversationRepository.findByUserIdAndConversationId(userId, conversationId);
            UserConversation userConversation;
            
            if (userConversationOpt.isPresent()) {
                userConversation = userConversationOpt.get();
            } else {
                userConversation = new UserConversation();
                userConversation.setUserId(userId);
                userConversation.setConversationId(conversationId);
                userConversation.setCreatedAt(LocalDateTime.now(ZoneId.of("Asia/Ho_Chi_Minh")));
            }

            // ƒê√°nh d·∫•u l√† ƒë√£ x√≥a
            userConversation.setDeleted(true);
            userConversation.setDeletedAt(LocalDateTime.now(ZoneId.of("Asia/Ho_Chi_Minh")));
            
            userConversationRepository.save(userConversation);

            // X√≥a t·∫•t c·∫£ tin nh·∫Øn trong conversation n√†y (ch·ªâ ·ªü ph√≠a user hi·ªán t·∫°i)
            // S·ª≠ d·ª•ng Pageable ƒë·ªÉ l·∫•y t·∫•t c·∫£ tin nh·∫Øn
            Pageable pageable = PageRequest.of(0, Integer.MAX_VALUE);
            Page<Message> messagePage = messageRepository.findByConversationId(conversationId, pageable);
            List<Message> messagesToDelete = messagePage.getContent();
            
            if (!messagesToDelete.isEmpty()) {
                // Thay v√¨ x√≥a tin nh·∫Øn th·ª±c s·ª±, ch√∫ng ta s·∫Ω ƒë√°nh d·∫•u l√† ƒë√£ x√≥a cho user n√†y
                // T·∫°o UserMessage records ƒë·ªÉ track vi·ªác x√≥a tin nh·∫Øn
                for (Message message : messagesToDelete) {
                    // T·∫°o record ƒë·ªÉ ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ b·ªã x√≥a b·ªüi user n√†y
                    UserMessage userMessage = new UserMessage();
                    userMessage.setUserId(userId);
                    userMessage.setMessageId(message.getId());
                    userMessage.setConversationId(conversationId);
                    userMessage.setDeleted(true);
                    userMessage.setDeletedAt(LocalDateTime.now(ZoneId.of("Asia/Ho_Chi_Minh")));
                    userMessageRepository.save(userMessage);
                }
                System.out.println("üóëÔ∏è Marked " + messagesToDelete.size() + " messages as deleted for user " + userId + " in conversation " + conversationId);
            }

                    return ApiResponse.success("00", "ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán kh·ªèi danh s√°ch");
    } catch (Exception e) {
        e.printStackTrace();
        return ApiResponse.error("99", "L·ªói khi x√≥a cu·ªôc tr√≤ chuy·ªán: " + e.getMessage());
    }
}

// Kh√¥i ph·ª•c conversation ƒë√£ b·ªã x√≥a
public ApiResponse<String> restoreConversationForUser(String conversationId, String userId) {
    try {
        // Ki·ªÉm tra conversation c√≥ t·ªìn t·∫°i kh√¥ng
        Optional<Conversation> conversationOpt = conversationRepository.findById(conversationId);
        if (conversationOpt.isEmpty()) {
            return ApiResponse.error("01", "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán");
        }

        // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) {
            return ApiResponse.error("02", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
        }

        // T√¨m UserConversation record
        Optional<UserConversation> userConversationOpt = userConversationRepository.findByUserIdAndConversationId(userId, conversationId);
        
        if (userConversationOpt.isEmpty()) {
            return ApiResponse.error("03", "Kh√¥ng t√¨m th·∫•y b·∫£n ghi x√≥a conversation");
        }

        UserConversation userConversation = userConversationOpt.get();
        
        if (!userConversation.isDeleted()) {
            return ApiResponse.error("04", "Conversation ch∆∞a b·ªã x√≥a");
        }

        // Kh√¥i ph·ª•c conversation
        userConversation.setDeleted(false);
        userConversation.setDeletedAt(null);
        userConversationRepository.save(userConversation);

        return ApiResponse.success("00", "ƒê√£ kh√¥i ph·ª•c cu·ªôc tr√≤ chuy·ªán");
    } catch (Exception e) {
        e.printStackTrace();
        return ApiResponse.error("99", "L·ªói khi kh√¥i ph·ª•c cu·ªôc tr√≤ chuy·ªán: " + e.getMessage());
    }
}

// Kh√¥i ph·ª•c t·∫•t c·∫£ tin nh·∫Øn ƒë√£ b·ªã x√≥a trong conversation (cho tr∆∞·ªùng h·ª£p user mu·ªën kh√¥i ph·ª•c tin nh·∫Øn c≈©)
public ApiResponse<String> restoreMessagesInConversation(String conversationId, String userId) {
    try {
        // Ki·ªÉm tra conversation c√≥ t·ªìn t·∫°i kh√¥ng
        Optional<Conversation> conversationOpt = conversationRepository.findById(conversationId);
        if (conversationOpt.isEmpty()) {
            return ApiResponse.error("01", "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán");
        }

        // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) {
            return ApiResponse.error("02", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
        }

        // Kh√¥i ph·ª•c t·∫•t c·∫£ tin nh·∫Øn ƒë√£ b·ªã x√≥a b·ªüi user n√†y
        int restoredCount = userMessageRepository.restoreMessagesForUser(userId, conversationId);
        
        return ApiResponse.success("00", "ƒê√£ kh√¥i ph·ª•c " + restoredCount + " tin nh·∫Øn");
    } catch (Exception e) {
        e.printStackTrace();
        return ApiResponse.error("99", "L·ªói khi kh√¥i ph·ª•c tin nh·∫Øn: " + e.getMessage());
    }
}

    // X√≥a nh√≥m (ch·ªâ creator m·ªõi ƒë∆∞·ª£c x√≥a)
    public ApiResponse<String> deleteGroup(String conversationId, String requesterId) {
        Optional<Conversation> optional = conversationRepository.findById(conversationId);
        if (optional.isEmpty()) {
            return ApiResponse.error("04", "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán");
        }

        Conversation conversation = optional.get();

        // Ki·ªÉm tra ph·∫£i l√† nh√≥m
        if (!conversation.isGroup()) {
            return ApiResponse.error("05", "Ch·ªâ nh√≥m m·ªõi ƒë∆∞·ª£c x√≥a");
        }

        // Ki·ªÉm tra quy·ªÅn: ch·ªâ creator m·ªõi ƒë∆∞·ª£c x√≥a nh√≥m
        Optional<ConversationMember> requesterMember = conversationMemberRepository.findByConversationIdAndUserId(conversationId, requesterId);
        if (requesterMember.isEmpty() || !requesterMember.get().getRole().equalsIgnoreCase("creator")) {
            return ApiResponse.error("06", "Ch·ªâ ng∆∞·ªùi t·∫°o nh√≥m m·ªõi ƒë∆∞·ª£c ph√©p x√≥a nh√≥m.");
        }

        // X√≥a t·∫•t c·∫£ th√†nh vi√™n tr∆∞·ªõc
        List<ConversationMember> members = conversationMemberRepository.findByConversationId(conversationId);
        conversationMemberRepository.deleteAll(members);
        
        // X√≥a nh√≥m
        conversationRepository.delete(conversation);

        return ApiResponse.success("00", "X√≥a nh√≥m th√†nh c√¥ng.");
    }

    public ApiResponse<List<ConversationResponse>> getConversationsByUser(String userId) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) {
            return ApiResponse.error("03", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: " + userId);
        }

        // L·∫•y t·∫•t c·∫£ ConversationMember li√™n quan ƒë·∫øn user n√†y
        List<ConversationMember> myMemberships = conversationMemberRepository.findByUserId(userId);
        List<Conversation> conversations = myMemberships.stream()
                .map(ConversationMember::getConversation)
                .filter(Objects::nonNull)
                .distinct()
                .collect(Collectors.toList());

        // L·ªçc ra nh·ªØng conversation ƒë√£ b·ªã user x√≥a (ch·ªâ nh·ªØng conversation th·ª±c s·ª± ƒë√£ b·ªã x√≥a)
        List<String> deletedConversationIds = userConversationRepository.findByUserIdAndIsDeletedTrue(userId)
                .stream()
                .map(UserConversation::getConversationId)
                .collect(Collectors.toList());

        System.out.println("üìã Found " + conversations.size() + " conversations for user " + userId);
        System.out.println("üóëÔ∏è Deleted conversation IDs: " + deletedConversationIds);

        conversations = conversations.stream()
                .filter(conv -> !deletedConversationIds.contains(conv.getId()))
                .collect(Collectors.toList());

        System.out.println("‚úÖ After filtering: " + conversations.size() + " conversations remain");

        // L·∫•y last message cho t·ª´ng conversation (l·ªçc ra tin nh·∫Øn ƒë√£ b·ªã x√≥a)
        Map<String, Message> lastMessages = new HashMap<>();
        for (Conversation conv : conversations) {
            // L·∫•y t·∫•t c·∫£ tin nh·∫Øn ƒë√£ b·ªã user x√≥a trong conversation n√†y
            List<String> deletedMessageIds = userMessageRepository.findDeletedMessageIdsByUserAndConversation(userId, conv.getId());
            
            // L·∫•y t·∫•t c·∫£ tin nh·∫Øn trong conversation, s·∫Øp x·∫øp theo th·ªùi gian gi·∫£m d·∫ßn
            Pageable pageable = PageRequest.of(0, 100); // L·∫•y nhi·ªÅu tin nh·∫Øn ƒë·ªÉ t√¨m tin nh·∫Øn cu·ªëi c√πng kh√¥ng b·ªã x√≥a
            Page<Message> messagePage = messageRepository.findByConversationId(conv.getId(), pageable);
            
            // T√¨m tin nh·∫Øn cu·ªëi c√πng kh√¥ng b·ªã x√≥a
            Optional<Message> lastNonDeletedMessage = messagePage.getContent().stream()
                    .filter(msg -> !deletedMessageIds.contains(msg.getId()))
                    .sorted((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt())) // S·∫Øp x·∫øp theo th·ªùi gian gi·∫£m d·∫ßn
                    .findFirst();
            
            if (lastNonDeletedMessage.isPresent()) {
                lastMessages.put(conv.getId(), lastNonDeletedMessage.get());
            }
        }

        List<ConversationResponse> responses = conversations.stream()
                .map(conv -> {
                    Message lastMsg = lastMessages.get(conv.getId());
                    ConversationResponse response = toConversationResponse(conv, userId, lastMsg);

                    if (!conv.isGroup()) {
                        // T√¨m th√†nh vi√™n t·ª´ repository thay v√¨ conv.getMembers()
                        List<ConversationMember> members = conversationMemberRepository.findByConversationId(conv.getId());

                        List<MemberResponse> memberResponses = members.stream()
                                .filter(cm -> cm.getUser() != null && !cm.getUser().getId().equals(userId))
                                .map(cm -> {
                                    User member = cm.getUser();
                                    return new MemberResponse(
                                            member.getId(),
                                            member.getDisplayName(),
                                            member.getAvatarUrl(),
                                            cm.getRole()
                                    );
                                })
                                .collect(Collectors.toList());

                        // B·∫£o v·ªá: n·∫øu null th√¨ set danh s√°ch r·ªóng
                        if (memberResponses == null) {
                            memberResponses = new ArrayList<>();
                        }

                        response.setMembers(memberResponses);
                    } else {
                        // Group c≈©ng c·∫ßn tr·∫£ members ƒë·ªÉ frontend c√≥ th·ªÉ ki·ªÉm tra role
                        List<ConversationMember> groupMembers = conversationMemberRepository.findByConversationId(conv.getId());
                        List<MemberResponse> groupMemberResponses = groupMembers.stream()
                                .map(cm -> {
                                    User member = cm.getUser();
                                    return new MemberResponse(
                                            member.getId(),
                                            member.getDisplayName(),
                                            member.getAvatarUrl(),
                                            cm.getRole()
                                    );
                                })
                                .collect(Collectors.toList());
                        response.setMembers(groupMemberResponses);
                    }

                    return response;
                })
                .sorted((a, b) -> {
                    LocalDateTime timeA = a.getLastMessage() != null ? a.getLastMessage().getCreatedAt() : a.getCreatedAt();
                    LocalDateTime timeB = b.getLastMessage() != null ? b.getLastMessage().getCreatedAt() : b.getCreatedAt();
                    return timeB.compareTo(timeA); // M·ªõi nh·∫•t l√™n ƒë·∫ßu
                })
                .collect(Collectors.toList());

        return ApiResponse.success("00", "L·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng", responses);
    }


    private Optional<Conversation> findOneToOneConversation(String userId1, String userId2) {
        return conversationMemberRepository.findByUserId(userId1).stream()
                .map(ConversationMember::getConversation)
                .filter(conv -> !conv.isGroup())
                .filter(conv -> {
                    List<ConversationMember> members = conversationMemberRepository.findByConversationId(conv.getId());
                    return members.size() == 2 && members.stream().anyMatch(m -> m.getUser().getId().equals(userId2));
                })
                .findFirst();
    }
    private ConversationResponse toConversationResponse(Conversation conversation, String requesterId, Message lastMessage) {
        String name;
        String avatarUrl = null;
        // L·∫•y danh s√°ch th√†nh vi√™n
        List<ConversationMember> members = conversationMemberRepository.findByConversationId(conversation.getId());

        User partner;

        // N·∫øu l√† nh√≥m
        if (conversation.isGroup()) {
            partner = null;
            name = conversation.getName();
            avatarUrl = conversation.getAvatarUrl();
        } else {
            // N·∫øu l√† cu·ªôc tr√≤ chuy·ªán 1-1
            partner = members.stream()
                    .map(ConversationMember::getUser)
                    .filter(user -> !user.getId().equals(requesterId))
                    .findFirst()
                    .orElse(null);

            name = (partner != null) ? partner.getDisplayName() : "Cu·ªôc tr√≤ chuy·ªán";
            avatarUrl = (partner != null) ? partner.getAvatarUrl() : null;
        }

        // X·ª≠ l√Ω th√¥ng tin tin nh·∫Øn cu·ªëi c√πng
        LastMessageInfo lastMessageInfo = null;
        if (lastMessage != null) {
            boolean seen = false;
            String statusStr = null;

            // Ki·ªÉm tra tr·∫°ng th√°i tin nh·∫Øn cu·ªëi c√πng c·ªßa requester
            MessageStatus status = messageStatusRepository.findByMessageIdAndUserId(lastMessage.getId(), requesterId);
            if (status != null) {
                statusStr = status.getStatus().name();
                seen = status.getStatus() == MessageStatusEnum.SEEN;
            }

            lastMessageInfo = new LastMessageInfo(
                    lastMessage.getContent(),
                    lastMessage.getSender().getDisplayName(),
                    getTimeAgo(lastMessage.getCreatedAt()),
                    statusStr,
                    lastMessage.getCreatedAt(),
                    seen

            );
        }

        // T·∫°o response
        ConversationResponse response = new ConversationResponse(
                conversation.getId(),
                name,
                conversation.isGroup(),
                avatarUrl,
                conversation.getCreatedAt(),
                lastMessageInfo,
                conversation.getCreatedBy()
        );

        // Ki·ªÉm tra tr·∫°ng th√°i ch·∫∑n n·∫øu kh√¥ng ph·∫£i nh√≥m
        if (!conversation.isGroup() && partner != null && requesterId != null) {
            userRepository.findById(requesterId).ifPresent(requester -> {
                boolean blockedByMe = friendshipRepository.existsBySenderAndReceiverAndStatus(requester, partner, "blocked");
                boolean blockedMe = friendshipRepository.existsBySenderAndReceiverAndStatus(partner, requester, "blocked");
                response.setBlockedByMe(blockedByMe);
                response.setBlockedMe(blockedMe);
                response.setBlocked(blockedByMe || blockedMe);
            });
        }

        return response;
    }

    private String getTimeAgo(LocalDateTime createdAt) {
        Duration duration = Duration.between(createdAt, LocalDateTime.now());
        if (duration.toMinutes() < 1) return "V·ª´a xong";
        if (duration.toHours() < 1) return duration.toMinutes() + " ph√∫t tr∆∞·ªõc";
        if (duration.toDays() < 1) return duration.toHours() + " gi·ªù tr∆∞·ªõc";
        return duration.toDays() + " ng√†y tr∆∞·ªõc";
    }

    @Transactional
    public ApiResponse<List<MessageResponse>> getMessagesByConversationId(String conversationId, String userId) {
        Optional<Conversation> optionalConversation = conversationRepository.findById(conversationId);
        if (optionalConversation.isEmpty()) {
            return ApiResponse.error("01", "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán");
        }

        // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong cu·ªôc tr√≤ chuy·ªán kh√¥ng
        boolean isMember = conversationMemberRepository.existsByConversationIdAndUserId(conversationId, userId);
        if (!isMember) {
            return ApiResponse.error("02", "Ng∆∞·ªùi d√πng kh√¥ng thu·ªôc cu·ªôc tr√≤ chuy·ªán n√†y");
        }

        // L·∫•y t·∫•t c·∫£ tin nh·∫Øn v√† s·∫Øp x·∫øp theo th·ªùi gian t·∫°o tƒÉng d·∫ßn
        List<Message> messages = messageRepository.findByConversationIdOrderByCreatedAtAsc(conversationId);

        List<MessageResponse> messageResponses = messages.stream()
                .map(messageMapper::toMessageResponse)
                .collect(Collectors.toList());

        return ApiResponse.success("00", "L·∫•y danh s√°ch tin nh·∫Øn th√†nh c√¥ng", messageResponses);
    }



}
